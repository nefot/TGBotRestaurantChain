import asyncio
import logging
from django.core.management.base import BaseCommand
from SecurityStaff.telegramBot.SecurityBot import main as security_main
from SecurityStaff.telegramBot.WaiterBot import main as waiter_main

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–æ–≤ –¥–ª—è —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤."

    def handle(self, *args, **options):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

        logger.info("üü¢ –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤...")

        async def run_bots():
            try:
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ SecurityBot...")
                security_task = asyncio.create_task(security_main())

                logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ WaiterBot...")
                waiter_task = asyncio.create_task(waiter_main())

                await asyncio.gather(security_task, waiter_task)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤: {e}", exc_info=True)
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                for task in asyncio.all_tasks():
                    task.cancel()
                raise

        try:
            asyncio.run(run_bots())
            logger.info("üü¢ –û–±–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            self.stderr.write(f"–û—à–∏–±–∫–∞: {e}")