from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from asgiref.sync import sync_to_async

from SecurityStaff.models import Waiter, ViolationWaiter
from .employee_profiles import show_waiter_profile
from ..keyboards import security_keyboard, statistics_keyboard, back_keyboard

router = Router()


class StatisticsStates(StatesGroup):
    waiting_for_employee_search = State()


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π"""

    waiters = await sync_to_async(list)(
        Waiter.objects.order_by('last_name', 'first_name').select_related('contact_info').prefetch_related(
            'posts').all()
    )

    if not waiters:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=security_keyboard)
        return


    employees_list = []
    for i, waiter in enumerate(waiters):

        violations_count = await sync_to_async(
            lambda: ViolationWaiter.objects.filter(waiter=waiter, role='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å').count()
        )()
        employees_list.append(
            f"{i + 1}. {waiter.last_name} {waiter.first_name} {waiter.patronymic or ''} "
            f"(–Ω–∞—Ä—É—à–µ–Ω–∏–π: {violations_count})"
        )

    await message.answer(
        f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ):\n\n" + "\n".join(employees_list),
        reply_markup=statistics_keyboard
    )


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏")
async def handle_employee_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_keyboard
    )
    await state.set_state(StatisticsStates.waiting_for_employee_search)


@router.message(StatisticsStates.waiting_for_employee_search)
async def process_employee_search(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è"""
    search_query = message.text.strip().lower()

    if search_query == "–Ω–∞–∑–∞–¥":
        await handle_back_from_statistics(message, state)
        return


    waiters = await sync_to_async(list)(
        Waiter.objects.order_by('last_name', 'first_name').select_related('contact_info').prefetch_related(
            'posts').all()
    )


    filtered_waiters = [
        w for w in waiters
        if search_query in w.last_name.lower() or
           search_query in w.first_name.lower() or
           (w.patronymic and search_query in w.patronymic.lower())
    ]

    if not filtered_waiters:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=statistics_keyboard)
        await state.clear()
        return

    if len(filtered_waiters) == 1:

        await show_waiter_profile(message, filtered_waiters[0], bot)
    else:

        employees_list = []
        for waiter in filtered_waiters:
            violations_count = await sync_to_async(
                lambda: ViolationWaiter.objects.filter(waiter=waiter, role='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å').count()
            )()
            employees_list.append(
                f"{waiter.last_name} {waiter.first_name} {waiter.patronymic or ''} "
                f"(–Ω–∞—Ä—É—à–µ–Ω–∏–π: {violations_count})"
            )

        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n" + "\n".join(employees_list) +
            "\n\n–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é",
            reply_markup=back_keyboard
        )
        return

    await state.clear()


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_from_statistics(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=security_keyboard
    )
