from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from asgiref.sync import sync_to_async

from SecurityStaff.models import Waiter
from .employee_profiles import show_waiter_profile
from .service import (process_selected_employee_number, get_current_month_violations_count,
                      get_total_violations_count, get_formatted_employee_list)
from ..keyboards import (security_keyboard, statistics_keyboard, back_keyboard)

router = Router()


class StatisticsStates(StatesGroup):
    waiting_for_employee_number = State()
    waiting_for_employee_search = State()
    viewing_statistics = State()


# ====================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======================


async def show_statistics_list(message: Message, state: FSMContext, bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –Ω–∞—Ä—É—à–µ–Ω–∏–π

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    """
    waiters = await sync_to_async(list)(
        Waiter.objects.order_by('last_name', 'first_name').all()
    )

    if not waiters:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=security_keyboard)
        return

    formatted_list = await get_formatted_employee_list(waiters)
    await message.answer(formatted_list, reply_markup=statistics_keyboard, parse_mode='HTML'
                         )
    await state.update_data(waiters=waiters)


async def handle_employee_search_request(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_keyboard
    )
    await state.set_state(StatisticsStates.waiting_for_employee_search)


async def process_search_results(message: Message, state: FSMContext, bot, search_query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param search_query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    """
    waiters = await sync_to_async(list)(Waiter.objects.order_by('last_name', 'first_name').all())

    filtered_waiters = [
        w for w in waiters
        if search_query in w.last_name.lower() or
           search_query in w.first_name.lower() or
           (w.patronymic and search_query in w.patronymic.lower())
    ]

    if not filtered_waiters:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=back_keyboard)
        return

    if len(filtered_waiters) == 1:
        await show_waiter_profile(message, filtered_waiters[0], bot)
        await state.set_state(StatisticsStates.viewing_statistics)
    else:
        now = datetime.now()
        current_month = now.strftime("%B").lower()

        employees_list = []
        for waiter in filtered_waiters:
            current_month_count = await sync_to_async(get_current_month_violations_count)(waiter)
            total_count = await sync_to_async(get_total_violations_count)(waiter)

            employees_list.append(
                f"{waiter.last_name} {waiter.first_name} {waiter.patronymic or ''} "
                f"({current_month_count} –∑–∞ {current_month}/–≤—Å–µ–≥–æ {total_count})"
            )

        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n" + "\n".join(employees_list) +
            "\n\n–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é",
            reply_markup=back_keyboard
        )


async def return_to_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=security_keyboard
    )


# ====================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ======================

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    await show_statistics_list(message, state, bot)
    await state.set_state(StatisticsStates.viewing_statistics)


@router.message(StatisticsStates.viewing_statistics, F.text == "üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏")
async def handle_employee_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    await handle_employee_search_request(message, state)


@router.message(StatisticsStates.waiting_for_employee_search)
async def process_employee_search(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    if message.text.strip().lower() == "–Ω–∞–∑–∞–¥":
        await show_statistics_list(message, state, bot)
        await state.set_state(StatisticsStates.viewing_statistics)
        return

    await process_search_results(message, state, bot, message.text.strip().lower())


@router.message(StatisticsStates.viewing_statistics, F.text.regexp(r'^\d+$'))
async def process_employee_number(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
    await process_selected_employee_number(message, state, bot)


@router.message(StatisticsStates.viewing_statistics, F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_from_statistics(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await return_to_main_menu(message, state)
