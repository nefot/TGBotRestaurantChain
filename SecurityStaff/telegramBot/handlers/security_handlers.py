import os

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ContentType
from aiogram.types import Message, ReplyKeyboardRemove
from asgiref.sync import sync_to_async

from SecurityStaff.models import Violation, Waiter, ViolationType, ViolationStatus, ViolationWaiter
from src_tgbotrestaurantchain import settings
from ..keyboards import security_keyboard, violations_management_keyboard

router = Router()

from .violation_view import router as violation_view_router
from .employee_profiles import router as employee_profiles_router
from .statistics import router as statistics_router
from .profile_management import router as profile_management_router


router.include_router(profile_management_router)
router.include_router(employee_profiles_router)
router.include_router(violation_view_router)
router.include_router(statistics_router)


class AddViolationState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_note = State()
    waiting_for_waiter = State()
    waiting_for_type = State()
    waiting_for_status = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π!",
        reply_markup=security_keyboard
    )


@router.message(F.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏")
async def handle_violations_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:",
        reply_markup=violations_management_keyboard
    )


@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ")
async def start_add_violation(message: Message, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Ñ–æ—Ç–æ.

    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddViolationState.waiting_for_photo)


@router.message(AddViolationState.waiting_for_photo, F.content_type == ContentType.PHOTO)
async def process_photo(message: Message, state: FSMContext, bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ media."""
    photo = message.photo[-1]


    file_ext = 'jpg'
    filename = f"violation_{message.message_id}.{file_ext}"
    media_path = os.path.join(settings.MEDIA_ROOT, 'violations/images', filename)


    os.makedirs(os.path.dirname(media_path), exist_ok=True)


    file = await bot.download(photo, destination=media_path)


    relative_path = os.path.join('violations/images', filename)
    await state.update_data(photo=relative_path)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:")
    await state.set_state(AddViolationState.waiting_for_note)


@router.message(AddViolationState.waiting_for_note)
async def process_note(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤"""
    await state.update_data(note=message.text)

    waiters = await sync_to_async(list)(Waiter.objects.order_by('last_name', 'first_name').all())

    if not waiters:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    waiters_list = "\n".join([f"{i + 1}. {w.last_name} {w.first_name}" for i, w in enumerate(waiters)])

    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:\n\n{waiters_list}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.update_data(waiters=waiters)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(AddViolationState.waiting_for_waiter)
@router.message(AddViolationState.waiting_for_waiter)
async def process_waiter(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –§–ò–û –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –§–ò–û –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò–º—è"
    :param state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    :raises ValueError: –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û
    :raises Waiter.DoesNotExist: –ï—Å–ª–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    """

    try:
        data = await state.get_data()
        waiters = data['waiters']

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        number = int(message.text.strip()) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Å 1

        if 0 <= number < len(waiters):
            waiter = waiters[number]
            await state.update_data(waiter=waiter)

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è
            types = await sync_to_async(list)(ViolationType.objects.all())
            types_list = "\n".join([f"{t.id}: {t.name}" for t in types])
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:\n{types_list}")
            await state.set_state(AddViolationState.waiting_for_type)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞).")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(AddViolationState.waiting_for_type)
async def process_type(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    :param state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        type_id = int(message.text)
        violation_type = await sync_to_async(ViolationType.objects.get)(id=type_id)
        await state.update_data(violation_type=violation_type)

        statuses = await sync_to_async(list)(ViolationStatus.objects.all())
        statuses_list = "\n".join([f"{s.id}: {s.name}" for s in statuses])

        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:\n{statuses_list}")
        await state.set_state(AddViolationState.waiting_for_status)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except ViolationType.DoesNotExist:
        await message.answer("–û—à–∏–±–∫–∞: –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.message(AddViolationState.waiting_for_status)
async def process_status(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ë–î.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    :raises ValueError: –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç–∞—Ç—É—Å–∞
    :raises ViolationStatus.DoesNotExist: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        status_id = int(message.text)
        data = await state.get_data()

        violation = Violation(
            image=data['photo'],
            note=data['note'],
            violation_type=data['violation_type'],
            status=await sync_to_async(ViolationStatus.objects.get)(id=status_id)
        )
        await sync_to_async(violation.save)()

        await sync_to_async(ViolationWaiter.objects.create)(
            violation=violation,
            waiter=data['waiter'],
            role='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å'
        )

        await message.answer("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=security_keyboard)
        await state.clear()

    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å—Ç–∞—Ç—É—Å–∞")
        await state.clear()
    except ViolationStatus.DoesNotExist:
        await message.answer("–û—à–∏–±–∫–∞: –°—Ç–∞—Ç—É—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await state.clear()
