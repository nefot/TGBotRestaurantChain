import asyncio
import os
import types
from datetime import datetime
from typing import Optional

from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist

from SecurityStaff.models import Waiter, ViolationWaiter
from ..keyboards import employees_management_keyboard


def get_current_month_violations_count(waiter):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    :param waiter: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    """
    now = datetime.now()
    return ViolationWaiter.objects.filter(
        waiter=waiter,
        role='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å',
        violation__date__month=now.month,
        violation__date__year=now.year
    ).count()


def get_total_violations_count(waiter):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π

    :param waiter: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :return: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    """
    return ViolationWaiter.objects.filter(
        waiter=waiter,
        role='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å'
    ).count()


async def get_contact_info(waiter, field: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        contact_info = await sync_to_async(lambda: waiter.contact_info)()
        if contact_info:
            value = getattr(contact_info, field, None)
            return value if value else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        return '–Ω–µ —É–∫–∞–∑–∞–Ω'
    except ObjectDoesNotExist:
        return '–Ω–µ —É–∫–∞–∑–∞–Ω'


async def load_waiter_image(waiter, info: str, message: Message):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        if not waiter.image:
            return info + "\n\n‚ö†Ô∏è –§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        image_path = os.path.join(settings.MEDIA_ROOT, str(waiter.image))

        if not os.path.exists(image_path):
            return info + "\n\n‚ö†Ô∏è –§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"

        with open(image_path, 'rb') as photo_file:
            photo_bytes = photo_file.read()

        photo = BufferedInputFile(
            file=photo_bytes,
            filename=os.path.basename(image_path)
        )

        await message.answer_photo(
            photo=photo,
            caption=info,
            reply_markup=employees_management_keyboard
        )
        return None  # –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    except Exception as e:
        return info + f"\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)}"


async def show_waiter_profile(message: Message, waiter, bot):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    phone, email, posts, violations = await asyncio.gather(
        get_contact_info(waiter, 'phone'),
        get_contact_info(waiter, 'email'),
        current_post(waiter),
        current_violation(waiter)
    )

    profile_info = (
        f"üë§ –§–ò–û: {waiter.last_name} {waiter.first_name} {waiter.patronymic or ''}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {phone}\n"
        f"üìß Email: {email}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç–∏: {posts}\n"
        f"üö® –ù–∞—Ä—É—à–µ–Ω–∏—è: {violations}"
    )

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    remaining_info = await load_waiter_image(waiter, profile_info, message)

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if remaining_info is not None:
        await message.answer(
            remaining_info,
            reply_markup=employees_management_keyboard
        )


async def current_violation(waiter):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö"""
    now = datetime.now()
    month_translation = {
        'january': '—è–Ω–≤–∞—Ä—å', 'february': '—Ñ–µ–≤—Ä–∞–ª—å', 'march': '–º–∞—Ä—Ç',
        'april'  : '–∞–ø—Ä–µ–ª—å', 'may': '–º–∞–π', 'june': '–∏—é–Ω—å',
        'july'   : '–∏—é–ª—å', 'august': '–∞–≤–≥—É—Å—Ç', 'september': '—Å–µ–Ω—Ç—è–±—Ä—å',
        'october': '–æ–∫—Ç—è–±—Ä—å', 'november': '–Ω–æ—è–±—Ä—å', 'december': '–¥–µ–∫–∞–±—Ä—å'
    }

    current_month = month_translation.get(now.strftime("%B").lower(), "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
    current_count, total_count = await asyncio.gather(
        sync_to_async(get_current_month_violations_count)(waiter),
        sync_to_async(get_total_violations_count)(waiter)
    )

    return f"({current_count} –∑–∞ {current_month}/–≤—Å–µ–≥–æ {total_count})"


async def current_post(waiter):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""
    try:
        posts = await sync_to_async(lambda: list(waiter.posts.all()))()
        return ', '.join(post.title for post in posts) if posts else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'
    except Exception:
        return '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'


async def get_formatted_employee_list(waiters):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""

    name_lengths = [len(f"{w.last_name} {w.first_name} {w.patronymic or ''}") for w in waiters]
    max_length = max(name_lengths)

    employees_list = []
    for i, waiter in enumerate(waiters):
        full_name = f"{waiter.last_name} {waiter.first_name} {waiter.patronymic or ''}"
        padding = " " * (max_length - len(full_name) + 3)

        employees_list.append(
            f"{i + 1}. <b>{full_name}{padding}</b> <i>{await current_violation(waiter)}</i>"
        )

    return "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ):\n\n" + "\n".join(employees_list)


async def delete_employee(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        waiters = data['waiters']
        number = int(message.text) - 1

        if 0 <= number < len(waiters):
            waiter = waiters[number]

            await sync_to_async(waiter.delete)()

            await message.answer(
                "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
                reply_markup=employees_management_keyboard
            )
        else:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                reply_markup=employees_management_keyboard
            )

        await state.clear()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=employees_management_keyboard
        )
        await state.clear()
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}",
            reply_markup=employees_management_keyboard
        )
        await state.clear()


async def process_selected_employee_number(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    """
    data = await state.get_data()
    waiters = data.get('waiters', [])

    try:
        number = int(message.text.strip()) - 1
        if 0 <= number < len(waiters):
            waiter = waiters[number]
            from SecurityStaff.telegramBot.handlers.employee_profiles import show_waiter_profile
            await show_waiter_profile(message, waiter, bot)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞).")


async def validate_telegram_username(username: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username

    Args:
        username: –í–≤–µ–¥—ë–Ω–Ω—ã–π username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        str: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(username) < 5:
        return "Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è @)"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not username.startswith('@'):
        return (
            "Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü—Ä–∏–º–µ—Ä: @nefoter\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username:"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    username_part = username[1:]  # —á–∞—Å—Ç—å –±–µ–∑ @
    if not username_part.replace('_', '').isalnum():
        return (
            "Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: @nefoter123\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username:"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(username) > 32:
        return (
            "Username —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username:"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ
    if await sync_to_async(Waiter.objects.filter(user_id=username).exists)():
        return (
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:"
        )

    return None


async def prepare_violation_message(violation):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"""
    waiter = await sync_to_async(lambda: violation.violation_waiters.first().waiter)()

    text = (
        f"üîç –ù–∞—Ä—É—à–µ–Ω–∏–µ #{violation.id}\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {waiter.last_name} {waiter.first_name}\n"
        f"üìÖ –î–∞—Ç–∞: {violation.date.strftime('%d.%m.%Y')}\n"
        f"üö® –¢–∏–ø: {violation.violation_type.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {violation.note}\n"
        f"üîí –°—Ç–∞—Ç—É—Å: {violation.status.name}"
    )

    photo = None
    error_message = None

    if violation.image:
        image_path = os.path.join(settings.MEDIA_ROOT, str(violation.image))
        if os.path.exists(image_path):
            try:
                photo = types.BufferedInputFile.from_file(
                    path=image_path,
                    filename=os.path.basename(image_path)
                )
            except Exception as e:
                error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)}"
        else:
            error_message = "‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    else:
        error_message = "‚ö†Ô∏è –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    return {
        "text": text,
        "photo": photo,
        "error_message": error_message
    }