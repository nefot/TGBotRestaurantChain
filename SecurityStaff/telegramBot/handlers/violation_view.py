import os
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram import types  # Add this import at the top of the file
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.conf import settings
from django.db.models import Prefetch

from SecurityStaff.models import Violation, ViolationWaiter
from ..keyboards import back_to_menu_keyboard, violations_management_keyboard, security_keyboard

router = Router()
VIOLATIONS_PER_PAGE = 5


async def get_violations_with_waiters(page: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –ø—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    end_date = datetime.now()
    start_date = end_date - timedelta(days=7)

    return await sync_to_async(list)(
        Violation.objects.filter(
            date__range=[start_date, end_date]
        ).select_related('violation_type', 'status')
        .prefetch_related(
            Prefetch('violation_waiters',
                     queryset=ViolationWaiter.objects.select_related('waiter'))
        )
        .order_by('-date', 'waiters__last_name')
        [page * VIOLATIONS_PER_PAGE:(page + 1) * VIOLATIONS_PER_PAGE]
    )


async def get_media_path(image_field):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –º–µ–¥–∏–∞"""
    if not image_field:
        return None
    return os.path.join(settings.MEDIA_ROOT, image_field.name)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    await state.clear()
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=security_keyboard
    )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        await callback.message.answer(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:",
            reply_markup=violations_management_keyboard
        )
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    await callback.answer()


async def send_violation_details(chat_id: int, violation, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Å —Ñ–æ—Ç–æ"""
    waiter = await sync_to_async(lambda: violation.violation_waiters.first().waiter)()

    text = (
        f"üîç –ù–∞—Ä—É—à–µ–Ω–∏–µ #{violation.id}\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {waiter.last_name} {waiter.first_name}\n"
        f"üìÖ –î–∞—Ç–∞: {violation.date.strftime('%d.%m.%Y')}\n"
        f"üö® –¢–∏–ø: {violation.violation_type.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {violation.note}\n"
        f"üîí –°—Ç–∞—Ç—É—Å: {violation.status.name}"
    )

    try:
        if violation.image:
            image_path = os.path.join(settings.MEDIA_ROOT, str(violation.image))
            if os.path.exists(image_path):
                # Correct way to create InputFile
                photo = types.BufferedInputFile.from_file(
                    path=image_path,
                    filename=os.path.basename(image_path)
                )
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=back_to_menu_keyboard
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"{text}\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                    parse_mode=ParseMode.HTML,
                    reply_markup=back_to_menu_keyboard
                )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=f"{text}\n\n‚ö†Ô∏è –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                parse_mode=ParseMode.HTML,
                reply_markup=back_to_menu_keyboard
            )
    except Exception as e:
        await bot.send_message(
            chat_id=chat_id,
            text=f"{text}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)}",
            parse_mode=ParseMode.HTML,
            reply_markup=back_to_menu_keyboard
        )


@router.message(F.text == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Ä—É—à–µ–Ω–∏–π")
async def show_violations_menu(message: Message, state: FSMContext, bot):
    await state.update_data(current_page=0)
    await display_violations(message, state, bot)


async def display_violations(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    current_page = data.get('current_page', 0)

    violations = await get_violations_with_waiters(current_page)

    if not violations:
        await message.answer("–ù–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                             reply_markup=back_to_menu_keyboard)
        return

    builder = InlineKeyboardBuilder()
    for violation in violations:
        waiter = await sync_to_async(lambda: violation.violation_waiters.first().waiter)()
        builder.button(
            text=f"{violation.date.strftime('%d.%m')} {waiter.last_name} {violation.violation_type.name}",
            callback_data=f"violation_{violation.id}"
        )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="prev_page"
        ))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    next_page_violations = await get_violations_with_waiters(current_page + 1)
    if next_page_violations:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data="next_page"
        ))

    if pagination_buttons:
        builder.row(*pagination_buttons)

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_menu"
    ))

    await message.answer(
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (–Ω–µ–¥–µ–ª—è):",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("violation_"))
async def show_violation_details(callback: CallbackQuery, bot):
    violation_id = int(callback.data.split("_")[1])
    violation = await sync_to_async(
        lambda: Violation.objects.select_related('violation_type', 'status')
        .prefetch_related(
            Prefetch('violation_waiters',
                     queryset=ViolationWaiter.objects.select_related('waiter'))
        )
        .get(id=violation_id)
    )()

    await send_violation_details(callback.from_user.id, violation, bot)
    await callback.answer()


@router.callback_query(F.data.in_(["prev_page", "next_page"]))
async def handle_pagination(callback: CallbackQuery, state: FSMContext, bot):
    data = await state.get_data()
    current_page = data.get('current_page', 0)

    if callback.data == "prev_page" and current_page > 0:
        current_page -= 1
    elif callback.data == "next_page":
        current_page += 1

    await state.update_data(current_page=current_page)
    await callback.message.delete()
    await display_violations(callback.message, state, bot)
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:",
        reply_markup=violations_management_keyboard
    )
    await callback.answer()


@router.message(lambda message: message.text.isdigit())
async def show_violation_by_id(message: Message, bot):
    try:
        violation = await sync_to_async(
            lambda: Violation.objects.select_related('violation_type', 'status')
            .prefetch_related(
                Prefetch('violation_waiters',
                         queryset=ViolationWaiter.objects.select_related('waiter'))
            )
            .get(id=int(message.text))
        )()

        await send_violation_details(message.chat.id, violation, bot)
    except Violation.DoesNotExist:
        await message.answer("–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                             reply_markup=back_to_menu_keyboard)
