from typing import Callable, Dict, Any, Awaitable

from aiogram import types
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from asgiref.sync import sync_to_async

from SecurityStaff.models import Waiter


class AccessMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: types.TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        message = data.get("event_update").message if data.get("event_update") else None
        if not message:
            return await handler(event, data)

        username = f"@{message.from_user.username}" if message.from_user.username else None
        if not username:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç @username –≤ Telegram. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç username –≤ –±–∞–∑–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø
        waiter = await sync_to_async(lambda: Waiter.objects.filter(user_id=username).first())()

        if not waiter:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        if not waiter.has_access:
            await message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return

        return await handler(event, data)
